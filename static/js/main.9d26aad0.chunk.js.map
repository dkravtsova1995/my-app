{"version":3,"sources":["components/RoomsList.js","components/MessageList.js","components/User.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["RoomsList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rooms","newRoomName","roomsRef","firebase","database","ref","_this2","on","snapshot","room","val","key","setState","concat","length","setActiveRoom","filter","push","name","createdAt","Date","now","e","target","value","preventDefault","createRoom","_this3","react_default","a","createElement","className","map","onClick","id","onSubmit","handleSubmit","type","onChange","handleChange","bind","placeholder","Component","MessageList","allMessages","newMessageText","messagesRef","message","username","user","displayName","content","sentAt","ServerValue","TIMESTAMP","roomId","activeRoom","child","remove","_this4","displayedMessages","dist_default","element","format","removeMessage","createMessage","User","auth","onAuthStateChanged","setUser","provider","GoogleAuthProvider","signInWithPopup","then","result","signOut","signIn","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","components_RoomsList","components_MessageList","components_User","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9d26aad0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass RoomsList extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      rooms: [],\r\n      newRoomName: ''\r\n    }\r\n\r\n    this.roomsRef = this.props.firebase.database().ref('rooms');\r\n  }\r\n\r\n  componentDidMount() {\r\n     this.roomsRef.on('child_added', snapshot => {\r\n          const room = snapshot.val();\r\n          room.key = snapshot.key;\r\n          this.setState({ rooms: this.state.rooms.concat( room ) })\r\n          if (this.state.rooms.length === 1) { this.props.setActiveRoom(room) }\r\n        });\r\n          this.roomsRef.on('child_removed', snapshot => {\r\n\t          this.setState({ rooms: this.state.rooms.filter( room => room.key !== snapshot.key) })\r\n       });\r\n  }\r\n\r\n  createRoom(newRoomName) {\r\n    this.roomsRef.push({\r\n      name: newRoomName,\r\n      createdAt: Date.now(),\r\n    });\r\n    this.setState({ newRoomName: '' });\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({newRoomName: e.target.value });\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    this.createRoom(this.state.newRoomName);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"rooms-list\">\r\n        {\r\n          this.state.rooms.map(room => {\r\n            return (\r\n              <div key={room.key}>\r\n                <button className=\"room-name\" onClick={ () => this.props.setActiveRoom(room) }>{ room.name }</button>\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n          <form id=\"create-room\" onSubmit={ (e) => { this.handleSubmit(e)} }>\r\n              <input type=\"text\" value={ this.state.newRoomName } onChange={ this.handleChange.bind(this) } name=\"newRoomName\" placeholder=\"New Room\" />\r\n              <input type=\"submit\" value=\"Submit\" />\r\n           </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default RoomsList;\r\n","import React, { Component } from 'react';\r\nimport Moment from 'react-moment';\r\nimport 'moment-timezone';\r\n\r\nclass MessageList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      allMessages: [],\r\n      newMessageText:''\r\n    }\r\n\r\n    this.messagesRef = this.props.firebase.database().ref('messages');\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n     this.messagesRef.on('child_added', snapshot => {\r\n          const message = snapshot.val();\r\n          message.key = snapshot.key;\r\n          this.setState({ allMessages: this.state.allMessages.concat( message )});\r\n    });\r\n\r\n    this.messagesRef.on('child_removed', snapshot  => {\r\n      this.setState({ allMessages: this.state.allMessages.filter( message => message.key !== snapshot.key ) });\r\n    });\r\n  }\r\n\r\n  createMessage(newMessageText) {\r\n    this.messagesRef.push({\r\n        username: this.props.user ? this.props.user.displayName : 'Guest',\r\n        content: newMessageText,\r\n        sentAt: this.props.firebase.database.ServerValue.TIMESTAMP,\r\n        roomId: this.props.activeRoom.key,\r\n      });\r\n    this.setState({ newMessageText: '' });\r\n  }\r\n\r\n  handleChange(e) {\r\n    e.preventDefault();\r\n    this.setState({newMessageText: e.target.value });\r\n  }\r\n\r\n  removeMessage(activeRoom) {\r\n    this.messagesRef.child(activeRoom.key).remove();\r\n  }\r\n\r\n  displayedMessages() {\r\n    return this.state.allMessages.filter(message =>  message.roomId === this.props.activeRoom.key)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main id=\"messages-component\">\r\n        <h2 className=\"room-name\">{ this.props.activeRoom ? this.props.activeRoom.name : '' }</h2>\r\n        <ul id=\"message-list\">\r\n          {this.displayedMessages().map( message =>\r\n            <li className=\"message-info\" key={message.key}>\r\n                <div className=\"username\">\r\n                  { message.username }\r\n                </div>\r\n\t        <div className=\"content\">\r\n\t  \t  { message.content }\r\n\t\t</div>\r\n\t\t<Moment element=\"span\" format=\"MM/DD/YY hh:mm A\" className=\"sent-at\">\r\n\t  \t  { message.sentAt }\r\n\t\t</Moment>\r\n                <button type=\"button\" className=\"btn-remove-msg\" onClick={() => this.removeMessage(message)} >\r\n                X\r\n                </button>\r\n            </li>\r\n          )}\r\n        </ul>\r\n        <form id=\"create-message\" onSubmit={ (e) => { e.preventDefault(); this.createMessage(this.state.newMessageText) } }>\r\n          <input type=\"text\" value={ this.state.newMessageText } onChange={ this.handleChange.bind(this) } name=\"newMessageText\" placeholder=\"Write your message here...\" />\r\n          <input type=\"submit\" value=\"Send\"/>\r\n        </form>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageList;\r\n","import React, { Component } from 'react';\r\n\r\nclass User extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.firebase.auth().onAuthStateChanged( user => {\r\n      this.props.setUser(user);\r\n    });\r\n  }\r\n\r\n  signIn() {\r\n    const provider = new this.props.firebase.auth.GoogleAuthProvider();\r\n    this.props.firebase.auth().signInWithPopup( provider ).then((result) => {\r\n\t    const user = result.user;\r\n\t    this.props.setUser(user);\r\n    });\r\n  }\r\n\r\n   signOut() {\r\n     this.props.firebase.auth().signOut().then(() => {\r\n\t     this.props.setUser(null);\r\n    });\r\n  }\r\n\r\n  render() {\r\n      return (\r\n        <section className=\"user-display\">\r\n          <div className=\"user-display-name\">{ this.props.user ? this.props.user.displayName : '' }</div>\r\n          <button className=\"sign-in-out\" onClick={ this.props.user ? this.signOut.bind(this) : this.signIn.bind(this) }>\r\n            <span>Sign { this.props.user ? 'out' : 'in' }</span>\r\n          </button>\r\n        </section>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default User;\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport RoomsList from './components/RoomsList';\r\nimport MessageList from './components/MessageList';\r\nimport User from './components/User';\r\nimport * as firebase from 'firebase';\r\n\r\nvar config = {\r\n    apiKey: \"AIzaSyDA03YY2qfaeV5bq9RPegkT0GmHO-JB9WQ\",\r\n    authDomain: \"rooms-935de.firebaseapp.com\",\r\n    databaseURL: \"https://rooms-935de.firebaseio.com\",\r\n    projectId: \"rooms-935de\",\r\n    storageBucket: \"rooms-935de.appspot.com\",\r\n    messagingSenderId: \"578717852404\"\r\n  };\r\n  firebase.initializeApp(config);\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      activeRoom: null,\r\n      user: null\r\n    };\r\n  }\r\n\r\n  setActiveRoom(room) {\r\n   this.setState({activeRoom: room});\r\n }\r\n\r\n  setUser(user) {\r\n    this.setState({user: user});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <h1>Bloc Chat</h1>\r\n          <RoomsList firebase={firebase} activeRoom={this.state.activeRoom} setActiveRoom={this.setActiveRoom.bind(this)} user={this.state.user}/>\r\n          <MessageList firebase={firebase} activeRoom={this.state.activeRoom} user={this.state.user}/>\r\n          <User firebase={firebase} setUser={this.setUser.bind(this)} user={this.state.user}/>\r\n        </header>\r\n        <main>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}